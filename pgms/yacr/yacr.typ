CHANNELPTR allocate_channel ();
DENSITY_LIST density_insert ();
INT_LIST insert_int ();
NETPTR allocate_nets ();
NETPTR input ();
NETPTR pop_net ();
NET_LIST delete_net ();
NET_LIST init_placeable ();
NET_LIST insert_net ();
NET_STACK break_cycle ();
PATHPTR bottom_path_route ();
PATHPTR insert_path ();
PATHPTR new_path();
PATHPTR top_path_route ();
PATH_LIST jog_bottom_net ();
PATH_LIST jog_top_net ();
PATH_LIST merge_path_lists ();
PATH_LIST push_path ();
char *alloc ();
int clean_channel ();
int delete_path();
int free_path_list();
int indent_channel();
int **allocate_cost ();
int **allocate_matrix ();
int *create_offset();
int *find_density ();
int add_one_row ();
int are_indents();
int column_sum ();
int correct_num_nets ();
int find_cycle ();
int hopeless();
int intersect_path ();
int is_fixed_net();
int max_offset();
int maze ();
int maze1a ();
int maze1b ();
int maze2 ();
int maze3 ();
int name_to_number ();
int pop_int ();
int search_column ();
int search_row ();
int** init_cost ();
int move_left();
int move_right();
int place_all_nets ();
int place_one_net ();
int print_densest ();
int remove_parallel ();
int scale_offset();
int set_high_cost ();
int set_low_cost ();
int set_med_cost ();
int update_cost ();
int verify ();
void add_columns ();
void append_columns ();
void build_graph ();
void check_border();
void check_indented_placement();
void check_pin ();
void command_line ();
void delete_pin ();
void draw_rect ();
void enlarge_channel ();
void horiz_traverse_net ();
void init_name_translation ();
void insert_edge ();
void level_graph ();
void make_graph ();
void max_metal ();
void net_cost ();
int place_edge_nets ();
void place_fixed_nets();
void print_channel ();
void print_cost ();
void print_levels();
void push_int ();
void push_net ();
void remove_edge ();
void select_column ();
void set_border_cost ();
void set_irreg_cost ();
void store_pin ();
void strip_dup_nets();
void strip_unique_nets();
void strip_zero_nets();
void unclip_border();
void verify_net ();
void vert_line_erase ();
void vert_traverse_net ();
